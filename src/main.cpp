
#include "Solver.hpp"
#include "PriorityQueue.hpp"
#include <iostream>
#include "CompareNodes.hpp"

int main(void)
{
	// t_node node1, node2, node3, node4;
	// node1.state = std::vector<std::vector<u_int> > (4, std::vector<u_int>(4, 1));
	// node1.state[0][0] = 1;
	// node1.state[0][1] = 0;
	// node1.state[0][2] = 2;
	// node1.state[0][3] = 4;
	// node1.state[1][0] = 12;
	// node1.state[1][1] = 13;
	// node1.state[1][2] = 3;
	// node1.state[1][3] = 5;
	// node1.state[2][0] = 11;
	// node1.state[2][1] = 15;
	// node1.state[2][2] = 14;
	// node1.state[2][3] = 6;
	// node1.state[3][0] = 10;
	// node1.state[3][1] = 9;
	// node1.state[3][2] = 7;
	// node1.state[3][3] = 8;
	// node1.g = 0;
	// node1.h = 0;
	// node1.zx = 1;
	// node1.zy = 0;
	// node2.state = std::vector<std::vector<u_int> > (4, std::vector<u_int>(4, 1));
	// node2.state[0][0] = 1;
	// node2.state[0][1] = 2;
	// node2.state[0][2] = 3;
	// node2.state[0][3] = 4;
	// node2.state[1][0] = 12;
	// node2.state[1][1] = 13;
	// node2.state[1][2] = 14;
	// node2.state[1][3] = 5;
	// node2.state[2][0] = 11;
	// node2.state[2][1] = 0;
	// node2.state[2][2] = 15;
	// node2.state[2][3] = 6;
	// node2.state[3][0] = 10;
	// node2.state[3][1] = 9;
	// node2.state[3][2] = 8;
	// node2.state[3][3] = 7;
	// node2.g = 0;
	// node2.h = 0;
	// node2.zx = 1;
	// node2.zy = 2;
	// Solver S(node2, node1, MANHATTAN);

	// t_node node1, node2, node3, node4;
	// node1.state = std::vector<std::vector<u_int> > (3, std::vector<u_int>(3, 1));
	// node1.state[0][0] = 2;
	// node1.state[0][1] = 3;
	// node1.state[0][2] = 5;
	// node1.state[1][0] = 6;
	// node1.state[1][1] = 0;
	// node1.state[1][2] = 8;
	// node1.state[2][0] = 1;
	// node1.state[2][1] = 4;
	// node1.state[2][2] = 7;
	// node1.g = 0;
	// node1.h = 0;
	// node1.zx = 1;
	// node1.zy = 1;
	// node2.state = std::vector<std::vector<u_int> > (3, std::vector<u_int>(3, 1));
	// node2.state[0][0] = 1;
	// node2.state[0][1] = 2;
	// node2.state[0][2] = 3;
	// node2.state[1][0] = 8;
	// node2.state[1][1] = 0;
	// node2.state[1][2] = 4;
	// node2.state[2][0] = 7;
	// node2.state[2][1] = 6;
	// node2.state[2][2] = 5;
	// node2.g = 0;
	// node2.h = 0;
	// node2.zx = 1;
	// node2.zy = 1;
	// Solver S(node2, node1, MANHATTAN);

	// S.run();
	// return 0;
	// t_node node1, node2, node3, node4;
	// node1.state = std::vector<uint> (16, 1);
	// node1.state[0] = 4;
	// node1.state[1] = 8;
	// node1.state[2] = 3;
	// node1.state[3] = 2;
	// node1.state[4] = 13;
	// node1.state[5] = 12;
	// node1.state[6] = 6;
	// node1.state[7] = 9;
	// node1.state[8] = 15;
	// node1.state[9] = 7;
	// node1.state[10] = 1;
	// node1.state[11] = 0;
	// node1.state[12] = 11;
	// node1.state[13] = 5;
	// node1.state[14] = 14;
	// node1.state[15] = 10;
	// node1.size = 4;
	// node1.g = 0;
	// node1.h = 0;
	// node1.zx = 3;
	// node1.zy = 2;
	// node2.state = std::vector<uint> (16, 1);
	// node2.state[0] = 1;
	// node2.state[1] = 2;
	// node2.state[2] = 3;
	// node2.state[3] = 4;
	// node2.state[4] = 12;
	// node2.state[5] = 13;
	// node2.state[6] = 14;
	// node2.state[7] = 5;
	// node2.state[8] = 11;
	// node2.state[9] = 0;
	// node2.state[10] = 15;
	// node2.state[11] = 6;
	// node2.state[12] = 10;
	// node2.state[13] = 9;
	// node2.state[14] = 8;
	// node2.state[15] = 7;
	// node2.g = 0;
	// node2.h = 0;
	// node2.size = 4;
	// node2.zx = 1;
	// node2.zy = 2;
	t_node node1, node2, node3, node4;
	node1.state = std::vector<uint> (9, 1);
	node1.state[0] = 4;
	node1.state[1] = 8;
	node1.state[2] = 6;
	node1.state[3] = 3;
	node1.state[4] = 0;
	node1.state[5] = 2;
	node1.state[6] = 1;
	node1.state[7] = 7;
	node1.state[8] = 5;
	node1.size = 3;
	node1.g = 0;
	node1.h = 0;
	node1.zx = 1;
	node1.zy = 1;
	node2.state = std::vector<uint> (9, 1);
	node2.state[0] = 1;
	node2.state[1] = 2;
	node2.state[2] = 3;
	node2.state[3] = 8;
	node2.state[4] = 0;
	node2.state[5] = 4;
	node2.state[6] = 7;
	node2.state[7] = 6;
	node2.state[8] = 5;
	node2.g = 0;
	node2.h = 0;
	node2.size = 3;
	node2.zx = 1;
	node2.zy = 1;
	Solver S(node2, node1, MANHATTAN);
	std::cout << "ready to run\n";
	S.run();
	return 0;
}
	// node2.state[0][0] = 1;
	// node2.state[0][1] = 2;
	// node2.state[0][2] = 3;
	// node2.state[0][3] = 4;
	// node2.state[1][0] = 12;
	// node2.state[1][1] = 13;
	// node2.state[1][2] = 14;
	// node2.state[1][3] = 5;
	// node2.state[2][0] = 11;
	// node2.state[2][1] = 0;
	// node2.state[2][2] = 15;
	// node2.state[2][3] = 6;
	// node2.state[3][0] = 10;
	// node2.state[3][1] = 9;
	// node2.state[3][2] = 8;
	// node2.state[3][3] = 7;

	// node1.state[0] = 4;
	// node1.state[1] = 8;
	// node1.state[2] = 6;
	// node1.state[3] = 3;
	// node1.state[4] = 0;
	// node1.state[5] = 2;
	// node1.state[6] = 1;
	// node1.state[7] = 7;
	// node1.state[8] = 5;